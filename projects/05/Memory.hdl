// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

/**          vvv
 * 0x6000 = 0110 0000 0000 0000
 * 0x5FFF = 0101 1111 1111 1111
 * 0x4000 = 0100 0000 0000 0000

    0111 -> bad
    0110 -> keyboard
    0101 -> screen
    0100 -> screen

    00__ -> memory
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];



    PARTS:
    DMux(in=true, sel=address[14], a=ramsel, b=tbd);
    DMux(in=tbd, sel=address[13], a=scrsel, b=kbsel);

    And(a=ramsel, b=load, out=writeram);
    And(a=kbsel, b=load, out=writekb);
    And(a=scrsel, b=load, out=writescr);


    RAM16K(in=in, load=writeram, address=address[0..13], out=outram);
    Keyboard(out=outkb);
    Screen(in=in, load=writescr, address=address[0..12], out=outscr);

    Mux16(a=outkb, b=outram, sel=ramsel, out=tmpout);
    Mux16(a=tmpout, b=outscr, sel=scrsel, out=out);
}
